version: '3.8'

services:
  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: weather-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - weather-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: weather-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-weather}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password must be set}
      POSTGRES_DB: ${DB_NAME:-weather_service}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - weather-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weather"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: weather-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - weather-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: weather-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:?Grafana admin password must be set}
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - weather-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: weather-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    networks:
      - weather-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: weather-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./monitoring/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4319:4317"   # OTLP gRPC receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - jaeger
      - prometheus
    networks:
      - weather-network

  # Weather Service
  weather-service:
    build: .
    container_name: weather-service
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - NWS_BASE_URL=${NWS_BASE_URL:-https://api.weather.gov}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-weather}
      - DB_PASSWORD=${DB_PASSWORD:?Database password must be set}
      - DB_NAME=${DB_NAME:-weather_service}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      - DATABASE_ENABLED=true
      - REDIS_ENABLED=true
      - REDIS_ADDR=${REDIS_ADDR:-redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      - RATE_LIMIT_RPS=${RATE_LIMIT_RPS:-100}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-otel-collector:4317}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      - weather-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  weather-network:
    driver: bridge